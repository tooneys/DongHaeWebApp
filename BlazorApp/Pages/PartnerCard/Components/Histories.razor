@attribute [Authorize]

@inject IDialogService DialogService
@inject ILogger<Histories> Logger
@implements IDisposable

<MudCard Elevation="3" Class="pa-4">
    <MudCardHeader>
        <MudText Typo="Typo.h6" Color="Color.Primary">방문이력</MudText>
    </MudCardHeader>
    <MudCardContent>
        <!-- 필터 섹션을 별도 컴포넌트로 분리 고려 -->
        <VisitHistoryFilter @bind-StartDate="startDate"
                            @bind-EndDate="endDate"
                            @bind-SearchText="searchText"
                            OnFilterCleared="ClearAllFilters"
                            OnFilterChanged="OnFilterChanged" />

        <VisitHistoryTable Data="@FilteredData" 
                          IsLoading="@(Data == null)" 
                          HasData="@(Data?.Any() == true)" />
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                   StartIcon=@Icons.Material.Filled.Add
                   @onclick="OpenAddDialog"
                   Disabled="@isDialogOpen">
            새 방문이력 추가
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public List<OpticianHistoryDto> Data { get; set; } = new();
    [Parameter] public EventCallback<OpticianHistoryDto> OnHistoryAdded { get; set; }
    [Parameter] public string OpticianId { get; set; } = string.Empty;

    private DateTime? startDate;
    private DateTime? endDate;
    private string searchText = string.Empty;

    private bool isDialogOpen = false;

    // 메모이제이션을 위한 캐시
    private IEnumerable<OpticianHistoryDto>? _filteredDataCache;
    private (DateTime?, DateTime?, int) _lastFilterState;

    private IEnumerable<OpticianHistoryDto> FilteredData
    {
        get
        {
            var currentState = (startDate, endDate, Data?.Count ?? 0);

            // 필터 조건이나 데이터가 변경되지 않았다면 캐시된 결과 반환
            if (_filteredDataCache != null && _lastFilterState.Equals(currentState))
                return _filteredDataCache;

            _lastFilterState = currentState;
            _filteredDataCache = ComputeFilteredData();
            return _filteredDataCache;
        }
    }

    private IEnumerable<OpticianHistoryDto> ComputeFilteredData()
    {
        if (Data == null) return Enumerable.Empty<OpticianHistoryDto>();

        var filtered = Data.AsEnumerable();

        if (startDate.HasValue)
        {
            filtered = filtered.Where(x => 
                DateTime.TryParse(x.DT_COMP, out var date) && date >= startDate.Value);
        }

        if (endDate.HasValue)
        {
            filtered = filtered.Where(x => 
                DateTime.TryParse(x.DT_COMP, out var date) && date <= endDate.Value);
        }

        return filtered.OrderByDescending(x => x.DT_COMP).ToList(); // ToList()로 즉시 실행
    }

    private void ClearAllFilters()
    {
        startDate = null;
        endDate = null;
        searchText = null;
        _filteredDataCache = null; // 캐시 무효화
    }

    private void OnFilterChanged(FilterChangedEventArgs args)
    {
        // 필터 변경 시 처리 로직
        _filteredDataCache = null; // 캐시 무효화
        StateHasChanged();
    }

    private async Task OpenAddDialog()
    {
        if (isDialogOpen) return; // 중복 클릭 방지

        isDialogOpen = true;

        try
        {
            var parameters = new DialogParameters
            {
                { "CD_CUST", OpticianId}
            };

            var options = new DialogOptions() 
            { 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false
            };

            var dialog = await DialogService.ShowAsync<AddVisitHistoryDialog>("새 방문이력 추가", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is OpticianHistoryDto newHistory)
            {
                Data.Add(newHistory);
                _filteredDataCache = null; // 캐시 무효화
                
                if (OnHistoryAdded.HasDelegate)
                {
                    await OnHistoryAdded.InvokeAsync(newHistory);
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening add dialog");
        }
        finally
        {
            isDialogOpen = false;
        }
    }

    public void Dispose()
    {
        _filteredDataCache = null;
    }
}
