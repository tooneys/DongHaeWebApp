@page "/userplan-report"
@attribute [Authorize]

@using System.Net.Http.Json
@using System.Text.Json

@inject HttpClient Http
@inject ILocalStorageService localStorageService
@inject IApiResponseHandler apiResponseHandler


<PageTitle>계획별 주문현황</PageTitle>

<MudPaper Class="pa-4 mb-2">
    <!-- 검색 조건 영역 -->
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudDatePicker Label="조회년월" @bind-Date="searchMonth" OpenTo="OpenTo.Month" FixDay="1" DateFormat="yyyy년 MM월" ShowToolbar="false" />
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect Label="판매구분" @bind-Value="itemDiv">
                @foreach (var data in itemDivs)
                {
                    <MudSelectItem Value="data">@data</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect Label="수량/금액" @bind-Value="valueDiv">
                @foreach (var data in valueDivs)
                {
                    <MudSelectItem Value="data">@data</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudTextField Label="담당자" @bind-Value="manager" Disabled />
        </MudItem>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadData">검색</MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (columns?.Any() == true)
{
    <div class="table-container mb-2">
        <table class="custom-table">
            <thead>
                <tr>
                    @foreach (var col in columns)
                    {
                        var isWeekHeader = col.title.EndsWith("계");
                        <th style="background-color: @(isWeekHeader ? "#BFEFFF": "");">@col.title</th>
                    }
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="@rows" Context="row" ItemSize="42">
                    <ItemContent>
                        <tr>
                            @foreach (var col in columns)
                            {
                                var isWeekHeader = col.title.EndsWith("계");
                                <td style="background-color: @(isWeekHeader ? "#BFEFFF" : "");">
                                    @(row.TryGetValue(col.field, out var val) ? FormatValue(val) : "")
                                </td>
                            }
                        </tr>
                    </ItemContent>
                </Virtualize>
            </tbody>
            @* <tfoot>
                <tr>
                    <td colspan="2">합계</td>
                    @for (int i = 2; i < columns.Count; i++)  // 마지막 열(예: 등급 담당자 코드여부)은 합산 제외
                    {
                        var col = columns[i];
                        decimal total = rows.Sum(r =>
                        {
                            if (r.TryGetValue(col.field, out var val))
                            {
                                if (val is JsonElement je)
                                {
                                    if (je.ValueKind == JsonValueKind.Number && je.TryGetDecimal(out var dec))
                                        return dec;
                                }
                                else if (val is IConvertible)
                                {
                                    try { return Convert.ToDecimal(val); } catch { }
                                }
                            }
                            return 0m;
                        });
                        <td>@total.ToString("N0")</td>
                    }
                </tr>
            </tfoot> *@

        </table>
    </div>
}
else
{
    <div class="no-data">데이터가 없습니다.</div>
}

@if (userPlanTargetReport != null)
{
    <MudPaper Class="d-flex align-center justify-center mud-width-full py-4 pa-2">
        <MudGrid>
            <MudItem xs="3">
                <MudField Label="타겟" Variant="Variant.Text">@userPlanTargetReport.am_target.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="전체합계" Variant="Variant.Text">@userPlanTargetReport.am_total.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="달성율" Variant="Variant.Text">@userPlanTargetReport.progress.ToString("n1")</MudField>
            </MudItem>

            <MudFlexBreak />

            <MudItem xs="3">
                <MudField Label="ST현재" Variant="Variant.Text">@userPlanTargetReport.am_order_st.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="ST추가" Variant="Variant.Text">@userPlanTargetReport.am_add_st.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="ST기타" Variant="Variant.Text">@userPlanTargetReport.am_etc_st.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="ST합계" Variant="Variant.Text">@userPlanTargetReport.am_total_st.ToString("n0")</MudField>
            </MudItem>
        
            <MudFlexBreak />

            <MudItem xs="3">
                <MudField Label="RX현재" Variant="Variant.Text">@userPlanTargetReport.am_order_rx.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="RX추가" Variant="Variant.Text">@userPlanTargetReport.am_add_rx.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="RX기타" Variant="Variant.Text">@userPlanTargetReport.am_etc_rx.ToString("n0")</MudField>
            </MudItem>
            <MudItem xs="3">
                <MudField Label="RX합계" Variant="Variant.Text">@userPlanTargetReport.am_order_rx.ToString("n0")</MudField>
            </MudItem>

            <MudItem xs="12">
                <MudField Label="비고" Variant="Variant.Text">@userPlanTargetReport.am_order_rx.ToString("n0")</MudField>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else
{
    <div class="no-data">달성율 데이터가 없습니다.</div>
}

@code {
    public record ColumnDef(string field, string title);

    List<ColumnDef> columns = new();
    List<Dictionary<string, object>> rows = new();

    string itemDiv = "전체";
    private readonly string[] itemDivs = { "전체", "RX", "ST", "기타" };

    string valueDiv = "전체";
    private readonly string[] valueDivs = { "전체", "수량", "금액" };

    DateTime? searchMonth = DateTime.Now;
    string? managerCode;
    string? manager;

    UserPlanTargetReport? userPlanTargetReport;

    protected override async Task OnInitializedAsync()
    {
        var userProfile = await localStorageService.GetItemAsync<UserProfile>("userProfile");
        managerCode = userProfile?.UserId ?? string.Empty;
        manager = userProfile?.Username ?? string.Empty;
    }

    private async Task LoadData()
    {
        await userplanDataLoad();
        await userplanTargetDataLoad();
    }

    private async Task userplanDataLoad()
    {
        var url = $"api/report/userplan?searchMonth={searchMonth:yyyyMM}&manager={managerCode}&valueDiv={valueDiv}&itemDiv={itemDiv}";
        var result = await Http.GetFromJsonAsync<ApiResult>(url);
        if (result != null)
        {
            columns = result.columns;
            rows = result.rows;
        }
    }

    private async Task userplanTargetDataLoad()
    {
        var url = $"api/report/userplan-target?searchMonth={searchMonth:yyyyMM}&manager={managerCode}";
        var response = await Http.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var result = await apiResponseHandler.HandleResponseAsync<UserPlanTargetReport>(response);

            userPlanTargetReport = result?.Data;
        }
        else
        {
            var errorMessage = await apiResponseHandler.ExtractErrorMessageAsync(response);
            Console.WriteLine($"Error loading user plan target data: {errorMessage}");
            // 에러 처리 로직 추가 (예: 사용자에게 알림)
            userPlanTargetReport = null;
        }
    }

    public class ApiResult
    {
        public List<ColumnDef> columns { get; set; } = new();
        public List<Dictionary<string, object>> rows { get; set; } = new();
    }

    private string FormatValue(object? value)
    {
        if (value is null)
            return string.Empty;

        // 1. JsonElement로 들어오는 경우 처리
        if (value is JsonElement je)
        {
            // 숫자일 경우
            if (je.ValueKind == JsonValueKind.Number)
            {
                if (je.TryGetDecimal(out var dec))
                    return dec.ToString("N0");          // 천단위 구분
                if (je.TryGetInt64(out var i64))
                    return i64.ToString("N1");
            }
            // 문자열일 경우 (날짜 문자열 포함)
            else if (je.ValueKind == JsonValueKind.String)
            {
                var str = je.GetString() ?? string.Empty;

                if (DateTime.TryParse(str, out var dt))
                    return dt.ToString("yyyy-MM-dd");

                return str;
            }
        }

        // 2. IConvertible 구현 타입 (int, long, double, decimal 등)
        if (value is IConvertible)
        {
            try
            {
                var dec = Convert.ToDecimal(value);
                return dec.ToString("N0");
            }
            catch
            {
                // 변환 실패하면 그냥 문자열 반환
            }
        }

        // 3. DateTime 직접 매칭
        if (value is DateTime dt2)
            return dt2.ToString("yyyy-MM-dd");

        // 4. 기본 문자열 출력
        return value.ToString() ?? string.Empty;
    }
}
