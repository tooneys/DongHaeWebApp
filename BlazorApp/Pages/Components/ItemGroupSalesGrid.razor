@inject DashboardService SalesService

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">품목별 매출 비율</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="@Icons.Material.Filled.Refresh"
                      OnClick="RefreshAsync"
                      Disabled="isLoading"
                      Size="Size.Small">
                새로고침
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-0">
        @if (isLoading)
        {
            <!-- 프로그레스 로딩 -->
            <div style="height: 650px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.body1" Class="mt-4" Color="Color.Secondary">
                    매출 데이터를 불러오는 중입니다...
                </MudText>
            </div>
        }
        else if (salesData?.Any() == true)
        {
            <MudTable Items="@salesData" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true" Height="650px">
                <HeaderContent>
                    <MudTh Style="width: 80px; text-align: center;">품목군</MudTh>
                    <MudTh Style="width: 80px; text-align: right;">수량(짝)</MudTh>
                    <MudTh Style="width: 80px; text-align: right;">수량(비율)</MudTh>
                    <MudTh Style="width: 100px; text-align: right;">금액(원)</MudTh>
                    <MudTh Style="width: 100px; text-align: right;">금액(비율)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="text-align: center;">
                        <MudText Typo="Typo.body1">
                            <strong>@context.GroupName</strong>
                        </MudText>
                    </MudTd>
                    <MudTd Style="text-align: right;">
                        <MudText Typo="Typo.body1">
                            <strong>@context.Qty.ToString("N0")</strong>
                        </MudText>
                    </MudTd>
                    <MudTd Style="text-align: right;">
                        <MudText Typo="Typo.body1">
                            <strong>@context.QtyRatio.ToString("N2") %</strong>
                        </MudText>
                    </MudTd>
                    <MudTd Style="text-align: right;">
                        <MudText Typo="Typo.body1">
                            <strong>@context.Amount.ToString("N0")</strong>
                        </MudText>
                    </MudTd>
                    <MudTd Style="text-align: right;">
                        <MudText Typo="Typo.body1">
                            <strong>@context.AmountRatio.ToString("N2") %</strong>
                        </MudText>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudAlert Severity="Severity.Info" Class="ma-4">
                표시할 데이터가 없습니다.
            </MudAlert>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<ItemGroupSales>? salesData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var allSales = await SalesService.GetAllItemGroupSalesAsync();
            salesData = allSales.Select((store, index) => new ItemGroupSales
                               {
                                    GroupName = store.GroupName,
                                    Qty = store.Qty,
                                    QtyRatio = store.QtyRatio,
                                    Amount = store.Amount,
                                    AmountRatio = store.AmountRatio,
                               })
                               .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sales data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task RefreshAsync()
    {
        await LoadDataAsync();
    }
}
