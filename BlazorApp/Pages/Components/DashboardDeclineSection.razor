@implements IDashboardSection
@implements IDisposable
@inject IJSRuntime JSRuntime

<MudPaper Class="pa-0" Elevation="3" Style="height: 800px; border-radius: 12px; overflow: hidden;">
    <div style="height: 100%; display: flex; flex-direction: column;">
        <!-- 섹션 헤더 -->
        <div class="section-header">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="pa-4">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                    <MudAvatar Color="Color.Error" Size="Size.Small">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingDown" />
                    </MudAvatar>
                    <MudText Typo="Typo.h6" Class="font-weight-bold text-error">
                        매출 하락 현황
                    </MudText>
                    @if (IsLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    }
                </MudStack>
                <MudChip T="string" Color="Color.Warning" Size="Size.Small" Variant="Variant.Filled">
                    위험 알림
                </MudChip>
            </MudStack>
            <MudDivider />
        </div>
        
        <!-- 가상화된 컨텐츠 영역 -->
        <div style="flex: 1; position: relative;">
            @if (IsLoading && _salesDeclineGrid == null)
            {
                <div class="d-flex justify-center align-center" style="height: 100%;">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <div class="scroll-box" @ref="_scrollContainer">
                    <SalesDeclineGrid @ref="_salesDeclineGrid" />
                </div>
            }
        </div>
    </div>
</MudPaper>

@code {
    private SalesDeclineGrid? _salesDeclineGrid;
    private ElementReference _scrollContainer;
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    
    public bool IsLoading { get; private set; } = false;

    public async Task RefreshAsync(CancellationToken cancellationToken = default)
    {
        if (IsLoading) return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            using var combinedCts = CancellationTokenSource.CreateLinkedTokenSource(
                cancellationToken, _cancellationTokenSource.Token);

            if (_salesDeclineGrid != null)
            {
                await _salesDeclineGrid.RefreshAsync();
            }
        }
        catch (OperationCanceledException)
        {
            // 취소된 경우 무시
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 스크롤 최적화
            await JSRuntime.InvokeVoidAsync("blazorHelpers.optimizeScroll", _scrollContainer);
        }
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}

<style>
    .section-header {
        background: linear-gradient(45deg, #fff8f8 0%, #ffe6e6 100%);
        border-bottom: 1px solid #fecaca;
    }

    .scroll-box {
        max-height: 100%;
        overflow-y: auto; /* 필요 시 x 도 추가 */
        padding: 8px;
        /* iOS·모바일 성능 개선 */
        -webkit-overflow-scrolling: touch;
    }
</style>
